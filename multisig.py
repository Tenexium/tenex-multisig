#!/usr/bin/env python3

import argparse
import json
import os
import sys
from decimal import Decimal
from typing import Any, List, Optional, Sequence, Tuple

from dotenv import load_dotenv
from eth_account import Account
from hexbytes import HexBytes
from web3 import Web3
from web3.contract.contract import Contract
from web3.exceptions import BadFunctionCallOutput


EMBEDDED_ABI: List[dict] = [
    # Functions
    {
        "type": "function",
        "stateMutability": "nonpayable",
        "name": "addOwner",
        "inputs": [{"internalType": "address", "name": "owner", "type": "address"}],
        "outputs": [],
    },
    {
        "type": "function",
        "stateMutability": "nonpayable",
        "name": "removeOwner",
        "inputs": [{"internalType": "address", "name": "owner", "type": "address"}],
        "outputs": [],
    },
    {
        "type": "function",
        "stateMutability": "nonpayable",
        "name": "setLockPeriod",
        "inputs": [
            {"internalType": "uint256", "name": "newLockPeriod", "type": "uint256"}
        ],
        "outputs": [],
    },
    {
        "type": "function",
        "stateMutability": "nonpayable",
        "name": "submitTransaction",
        "inputs": [
            {"internalType": "address", "name": "destination", "type": "address"},
            {"internalType": "uint256", "name": "value", "type": "uint256"},
            {"internalType": "bytes", "name": "data", "type": "bytes"},
        ],
        "outputs": [
            {"internalType": "uint256", "name": "transactionId", "type": "uint256"}
        ],
    },
    {
        "type": "function",
        "stateMutability": "nonpayable",
        "name": "confirmTransaction",
        "inputs": [
            {"internalType": "uint256", "name": "transactionId", "type": "uint256"}
        ],
        "outputs": [],
    },
    {
        "type": "function",
        "stateMutability": "nonpayable",
        "name": "revokeConfirmation",
        "inputs": [
            {"internalType": "uint256", "name": "transactionId", "type": "uint256"}
        ],
        "outputs": [],
    },
    {
        "type": "function",
        "stateMutability": "nonpayable",
        "name": "executeTransaction",
        "inputs": [
            {"internalType": "uint256", "name": "transactionId", "type": "uint256"}
        ],
        "outputs": [],
    },
    {
        "type": "function",
        "stateMutability": "view",
        "name": "getOwners",
        "inputs": [],
        "outputs": [{"internalType": "address[]", "name": "", "type": "address[]"}],
    },
    {
        "type": "function",
        "stateMutability": "view",
        "name": "getTransaction",
        "inputs": [
            {"internalType": "uint256", "name": "transactionId", "type": "uint256"}
        ],
        "outputs": [
            {"internalType": "address", "name": "destination", "type": "address"},
            {"internalType": "uint256", "name": "value", "type": "uint256"},
            {"internalType": "bytes", "name": "data", "type": "bytes"},
            {"internalType": "bool", "name": "executed", "type": "bool"},
        ],
    },
    {
        "type": "function",
        "stateMutability": "view",
        "name": "isConfirmed",
        "inputs": [
            {"internalType": "uint256", "name": "transactionId", "type": "uint256"},
            {"internalType": "address", "name": "owner", "type": "address"},
        ],
        "outputs": [{"internalType": "bool", "name": "", "type": "bool"}],
    },
    {
        "type": "function",
        "stateMutability": "view",
        "name": "getThreshold",
        "inputs": [],
        "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
    },
    {
        "type": "function",
        "stateMutability": "view",
        "name": "getConfirmationCount",
        "inputs": [
            {"internalType": "uint256", "name": "transactionId", "type": "uint256"}
        ],
        "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
    },
    {
        "type": "function",
        "stateMutability": "view",
        "name": "getOwnerSetVersion",
        "inputs": [],
        "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
    },
    # Public getters generated by Solidity for public state vars
    {
        "type": "function",
        "stateMutability": "view",
        "name": "isOwner",
        "inputs": [{"internalType": "address", "name": "", "type": "address"}],
        "outputs": [{"internalType": "bool", "name": "", "type": "bool"}],
    },
    {
        "type": "function",
        "stateMutability": "view",
        "name": "owners",
        "inputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
        "outputs": [{"internalType": "address", "name": "", "type": "address"}],
    },
    {
        "type": "function",
        "stateMutability": "view",
        "name": "transactions",
        "inputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
        "outputs": [
            {"internalType": "address", "name": "", "type": "address"},
            {"internalType": "uint256", "name": "", "type": "uint256"},
            {"internalType": "bytes", "name": "", "type": "bytes"},
            {"internalType": "bool", "name": "", "type": "bool"},
        ],
    },
    {
        "type": "function",
        "stateMutability": "view",
        "name": "confirmations",
        "inputs": [
            {"internalType": "uint256", "name": "", "type": "uint256"},
            {"internalType": "address", "name": "", "type": "address"},
        ],
        "outputs": [{"internalType": "bool", "name": "", "type": "bool"}],
    },
    {
        "type": "function",
        "stateMutability": "view",
        "name": "confirmationVersion",
        "inputs": [
            {"internalType": "uint256", "name": "", "type": "uint256"},
            {"internalType": "address", "name": "", "type": "address"},
        ],
        "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
    },
    {
        "type": "function",
        "stateMutability": "view",
        "name": "transactionCount",
        "inputs": [],
        "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
    },
    {
        "type": "function",
        "stateMutability": "view",
        "name": "lockPeriod",
        "inputs": [],
        "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
    },
    {
        "type": "function",
        "stateMutability": "view",
        "name": "submissionBlock",
        "inputs": [
            {"internalType": "uint256", "name": "transactionId", "type": "uint256"}
        ],
        "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
    },
]


TARGET_ABI: List[dict] = [
    {
        "type": "function",
        "stateMutability": "payable",
        "name": "upgradeToAndCall",
        "inputs": [
            {"internalType": "address", "name": "newImplementation", "type": "address"},
            {"internalType": "bytes", "name": "data", "type": "bytes"},
        ],
        "outputs": [],
    },
    {
        "type": "function",
        "stateMutability": "nonpayable",
        "name": "updateTierParameters",
        "inputs": [
            {"internalType": "uint256[5]", "name": "_tierThresholds", "type": "uint256[5]"},
            {"internalType": "uint256[6]", "name": "_tierFeeDiscounts", "type": "uint256[6]"},
            {"internalType": "uint256[6]", "name": "_tierMaxLeverages", "type": "uint256[6]"}
        ],
        "outputs": [],
    },
]


def eprint(*args: Any, **kwargs: Any) -> None:
    print(*args, file=sys.stderr, **kwargs)


def to_checksum_optional(w3: Web3, address: Optional[str]) -> Optional[str]:
    if address is None:
        return None
    return w3.to_checksum_address(address)


def parse_bool(text: str) -> bool:
    lowered = text.strip().lower()
    if lowered in ("true", "1", "yes", "y", "on"):
        return True
    if lowered in ("false", "0", "no", "n", "off"):
        return False
    raise ValueError(f"Cannot parse boolean from '{text}'")


def parse_numeric(text: str) -> int:
    text = text.strip()
    if text.startswith("0x"):
        return int(text, 16)
    return int(text)


def parse_bytes(text: str) -> bytes:
    text = text.strip()
    if text.startswith("0x"):
        return HexBytes(text)
    # allow raw ascii prefixed by raw:
    if text.startswith("raw:"):
        return text[len("raw:") :].encode()
    raise ValueError("bytes must be hex (0x...) or prefixed with 'raw:'")


def parse_array(elem_parser, text: str) -> list:
    s = text.strip()
    if s.startswith("["):
        data = json.loads(s)
        if not isinstance(data, list):
            raise ValueError("Expected JSON array for array argument")
        return [elem_parser(str(x)) for x in data]
    # comma-separated fallback
    parts = [p for p in (s.split(",") if s else [])]
    return [elem_parser(p.strip()) for p in parts if p.strip()]


def parser_for_abi_type(w3: Web3, abi_type: str):
    if abi_type.endswith("[]"):
        elem_type = abi_type[:-2]
        elem_parser = parser_for_abi_type(w3, elem_type)
        return lambda s: parse_array(elem_parser, s)
    # Handle fixed-size arrays like uint256[5]
    if "[" in abi_type and "]" in abi_type:
        elem_type = abi_type.split("[")[0]
        elem_parser = parser_for_abi_type(w3, elem_type)
        return lambda s: parse_array(elem_parser, s)
    if abi_type == "address":
        return lambda s: w3.to_checksum_address(s)
    if abi_type.startswith("uint") or abi_type.startswith("int"):
        return parse_numeric
    if abi_type == "bool":
        return parse_bool
    if abi_type.startswith("bytes"):
        return parse_bytes
    if abi_type == "string":
        return str
    # Fallback, pass through
    return str


def load_env() -> None:
    # Loads .env in current directory if present
    load_dotenv(override=False)


def get_w3(rpc_url: str) -> Web3:
    w3 = Web3(Web3.HTTPProvider(rpc_url, request_kwargs={"timeout": 60}))
    return w3


def load_abi(abi_path: Optional[str]) -> List[dict]:
    if abi_path:
        with open(abi_path, "r", encoding="utf-8") as f:
            return json.load(f)
    return EMBEDDED_ABI


def get_contract(w3: Web3, address: str, abi: List[dict]) -> Contract:
    return w3.eth.contract(address=w3.to_checksum_address(address), abi=abi)


def get_account_and_from(
    private_key: Optional[str], from_address: Optional[str]
) -> Tuple[Optional[Any], Optional[str]]:
    acct = None
    sender = None
    if private_key:
        acct = Account.from_key(private_key)
        sender = acct.address
    if from_address:
        sender = from_address
    return acct, sender


def wei_from_value_args(value_wei: Optional[int], value_eth: Optional[str]) -> int:
    if value_wei is not None and value_eth is not None:
        raise ValueError("Specify only one of --value-wei or --value-eth")
    if value_wei is not None:
        return int(value_wei)
    if value_eth is not None:
        return int(Decimal(value_eth) * (10**18))
    return 0


def build_and_send_contract_tx(
    w3: Web3,
    func,
    sender: str,
    private_key: str,
    value_wei: int = 0,
    gas: Optional[int] = None,
    chain_id: Optional[int] = None,
    nonce: Optional[int] = None,
    max_fee_gwei: Optional[Decimal] = None,
    max_priority_gwei: Optional[Decimal] = None,
    gas_price_gwei: Optional[Decimal] = None,
    wait: bool = True,
) -> dict:
    tx: dict = {
        "from": sender,
        "value": value_wei,
    }

    # Chain id
    try:
        tx_chain_id = chain_id if chain_id is not None else w3.eth.chain_id
    except Exception:
        tx_chain_id = chain_id
    if tx_chain_id is not None:
        tx["chainId"] = int(tx_chain_id)

    # Nonce
    tx_nonce = nonce if nonce is not None else w3.eth.get_transaction_count(sender)
    tx["nonce"] = tx_nonce

    # Gas and fees
    if gas is None:
        try:
            gas = func.estimate_gas({"from": sender, "value": value_wei})
        except Exception:
            gas = None
    if gas is not None:
        tx["gas"] = int(gas)

    # Prefer EIP-1559 if possible
    if max_fee_gwei is not None or max_priority_gwei is not None:
        base = Decimal(int(w3.eth.gas_price)) / Decimal(1e9)
        max_priority = (
            max_priority_gwei if max_priority_gwei is not None else Decimal("2")
        )
        max_fee = max_fee_gwei if max_fee_gwei is not None else base + max_priority
        tx["maxPriorityFeePerGas"] = int(max_priority * Decimal(1e9))
        tx["maxFeePerGas"] = int(max_fee * Decimal(1e9))
    elif gas_price_gwei is not None:
        tx["gasPrice"] = int(Decimal(gas_price_gwei) * Decimal(1e9))
    else:
        # Auto EIP-1559
        try:
            prio = w3.eth.max_priority_fee
            base_gwei = Decimal(int(w3.eth.gas_price)) / Decimal(1e9)
            prio_gwei = Decimal(int(prio)) / Decimal(1e9)
            tx["maxPriorityFeePerGas"] = int(prio_gwei * Decimal(1e9))
            tx["maxFeePerGas"] = int(
                (base_gwei + prio_gwei * Decimal(2)) * Decimal(1e9)
            )
        except Exception:
            # Fallback legacy
            tx["gasPrice"] = int(w3.eth.gas_price)

    built = func.build_transaction(tx)
    signed = w3.eth.account.sign_transaction(built, private_key=private_key)
    tx_hash = w3.eth.send_raw_transaction(signed.raw_transaction)
    if wait:
        receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
        return {"txHash": tx_hash.hex(), "receipt": dict(receipt)}
    return {"txHash": tx_hash.hex()}


def find_function_abi(abi: List[dict], fn_name: str):
    cands = [f for f in abi if f.get("type") == "function" and f.get("name") == fn_name]
    if not cands:
        raise ValueError(f"Function '{fn_name}' not found in ABI")
    if len(cands) > 1:
        # Could implement overload resolution by arg types; for now, fail clearly
        raise ValueError(
            f"Function '{fn_name}' is overloaded; please provide ABI with a single signature"
        )
    return cands[0]


def parse_args_for_function(
    w3: Web3, abi: List[dict], fn_name: str, arg_values: Sequence[str]
) -> Tuple[List[Any], List[str]]:
    fn_abi = find_function_abi(abi, fn_name)
    inputs = fn_abi.get("inputs", [])
    if len(arg_values) != len(inputs):
        raise ValueError(
            f"{fn_name} expects {len(inputs)} args ({[i['type'] for i in inputs]}), got {len(arg_values)}"
        )
    parsed = []
    for spec, raw in zip(inputs, arg_values):
        parser = parser_for_abi_type(w3, spec["type"])
        parsed.append(parser(raw))
    return parsed, [i["type"] for i in inputs]


def pretty_print(obj: Any, as_json: bool = False) -> None:
    if as_json:
        print(json.dumps(obj, indent=2, default=str))
    else:
        if isinstance(obj, (dict, list, tuple)):
            print(json.dumps(obj, indent=2, default=str))
        else:
            print(obj)


def cmd_submit(args: argparse.Namespace) -> None:
    load_env()
    rpc_url = args.rpc or os.getenv("RPC_URL")
    if not rpc_url:
        eprint("Missing RPC URL. Provide --rpc or set RPC_URL in .env")
        sys.exit(2)
    w3 = get_w3(rpc_url)

    abi = load_abi(args.abi_path)

    private_key = args.pk or os.getenv("PRIVATE_KEY")
    if not private_key:
        eprint("Missing private key. Provide --pk or set PRIVATE_KEY in .env")
        sys.exit(2)

    chain_id = (
        int(args.chain_id)
        if args.chain_id
        else (int(os.getenv("CHAIN_ID")) if os.getenv("CHAIN_ID") else None)
    )

    contract_address = args.contract or os.getenv("CONTRACT_ADDRESS")
    if not contract_address:
        eprint(
            "Missing contract address. Provide --contract or set CONTRACT_ADDRESS in .env"
        )
        sys.exit(2)

    contract = get_contract(w3, contract_address, abi)

    acct, from_address = get_account_and_from(private_key, args.sender)
    if not from_address:
        eprint("Cannot determine sender. Provide --from or a PRIVATE_KEY")
        sys.exit(2)

    destination = w3.to_checksum_address(args.to)
    value_wei = wei_from_value_args(args.value_wei, args.value_eth)
    data = HexBytes(args.data) if args.data else b""

    fn = contract.functions.submitTransaction(destination, value_wei, data)

    res = build_and_send_contract_tx(
        w3,
        fn,
        from_address,
        private_key,
        value_wei=0,
        gas=args.gas,
        chain_id=chain_id,
        nonce=args.nonce,
        max_fee_gwei=(
            Decimal(args.max_fee_gwei) if args.max_fee_gwei is not None else None
        ),
        max_priority_gwei=(
            Decimal(args.max_priority_gwei)
            if args.max_priority_gwei is not None
            else None
        ),
        gas_price_gwei=(
            Decimal(args.gas_price_gwei) if args.gas_price_gwei is not None else None
        ),
        wait=not args.no_wait,
    )
    pretty_print(res, as_json=args.json)


def cmd_add_owner(args: argparse.Namespace) -> None:
    # Encode addOwner and submit to the multisig itself
    load_env()
    rpc_url = args.rpc or os.getenv("RPC_URL")
    if not rpc_url:
        eprint("Missing RPC URL. Provide --rpc or set RPC_URL in .env")
        sys.exit(2)
    w3 = get_w3(rpc_url)

    abi = load_abi(args.abi_path)

    private_key = args.pk or os.getenv("PRIVATE_KEY")
    if not private_key:
        eprint("Missing private key. Provide --pk or set PRIVATE_KEY in .env")
        sys.exit(2)

    chain_id = (
        int(args.chain_id)
        if args.chain_id
        else (int(os.getenv("CHAIN_ID")) if os.getenv("CHAIN_ID") else None)
    )

    contract_address = args.contract or os.getenv("CONTRACT_ADDRESS")
    if not contract_address:
        eprint(
            "Missing contract address. Provide --contract or set CONTRACT_ADDRESS in .env"
        )
        sys.exit(2)

    contract = get_contract(w3, contract_address, abi)

    acct, from_address = get_account_and_from(private_key, args.sender)
    if not from_address:
        eprint("Cannot determine sender. Provide --from or a PRIVATE_KEY")
        sys.exit(2)

    inner_fn = contract.functions.addOwner(w3.to_checksum_address(args.owner))
    inner_data: HexBytes = inner_fn._encode_transaction_data()  # type: ignore[attr-defined]

    fn = contract.functions.submitTransaction(contract.address, 0, inner_data)

    res = build_and_send_contract_tx(
        w3,
        fn,
        from_address,
        private_key,
        value_wei=0,
        gas=args.gas,
        chain_id=chain_id,
        nonce=args.nonce,
        max_fee_gwei=(
            Decimal(args.max_fee_gwei) if args.max_fee_gwei is not None else None
        ),
        max_priority_gwei=(
            Decimal(args.max_priority_gwei)
            if args.max_priority_gwei is not None
            else None
        ),
        gas_price_gwei=(
            Decimal(args.gas_price_gwei) if args.gas_price_gwei is not None else None
        ),
        wait=not args.no_wait,
    )
    pretty_print(res, as_json=args.json)


def cmd_remove_owner(args: argparse.Namespace) -> None:
    # Encode removeOwner and submit to the multisig itself
    load_env()
    rpc_url = args.rpc or os.getenv("RPC_URL")
    if not rpc_url:
        eprint("Missing RPC URL. Provide --rpc or set RPC_URL in .env")
        sys.exit(2)
    w3 = get_w3(rpc_url)

    abi = load_abi(args.abi_path)

    private_key = args.pk or os.getenv("PRIVATE_KEY")
    if not private_key:
        eprint("Missing private key. Provide --pk or set PRIVATE_KEY in .env")
        sys.exit(2)

    chain_id = (
        int(args.chain_id)
        if args.chain_id
        else (int(os.getenv("CHAIN_ID")) if os.getenv("CHAIN_ID") else None)
    )

    contract_address = args.contract or os.getenv("CONTRACT_ADDRESS")
    if not contract_address:
        eprint(
            "Missing contract address. Provide --contract or set CONTRACT_ADDRESS in .env"
        )
        sys.exit(2)

    contract = get_contract(w3, contract_address, abi)

    acct, from_address = get_account_and_from(private_key, args.sender)
    if not from_address:
        eprint("Cannot determine sender. Provide --from or a PRIVATE_KEY")
        sys.exit(2)

    inner_fn = contract.functions.removeOwner(w3.to_checksum_address(args.owner))
    inner_data: HexBytes = inner_fn._encode_transaction_data()  # type: ignore[attr-defined]

    fn = contract.functions.submitTransaction(contract.address, 0, inner_data)

    res = build_and_send_contract_tx(
        w3,
        fn,
        from_address,
        private_key,
        value_wei=0,
        gas=args.gas,
        chain_id=chain_id,
        nonce=args.nonce,
        max_fee_gwei=(
            Decimal(args.max_fee_gwei) if args.max_fee_gwei is not None else None
        ),
        max_priority_gwei=(
            Decimal(args.max_priority_gwei)
            if args.max_priority_gwei is not None
            else None
        ),
        gas_price_gwei=(
            Decimal(args.gas_price_gwei) if args.gas_price_gwei is not None else None
        ),
        wait=not args.no_wait,
    )
    pretty_print(res, as_json=args.json)


def cmd_set_lock_period(args: argparse.Namespace) -> None:
    # Encode setLockPeriod and submit to the multisig itself
    load_env()
    rpc_url = args.rpc or os.getenv("RPC_URL")
    if not rpc_url:
        eprint("Missing RPC URL. Provide --rpc or set RPC_URL in .env")
        sys.exit(2)
    w3 = get_w3(rpc_url)

    abi = load_abi(args.abi_path)

    private_key = args.pk or os.getenv("PRIVATE_KEY")
    if not private_key:
        eprint("Missing private key. Provide --pk or set PRIVATE_KEY in .env")
        sys.exit(2)

    chain_id = (
        int(args.chain_id)
        if args.chain_id
        else (int(os.getenv("CHAIN_ID")) if os.getenv("CHAIN_ID") else None)
    )

    contract_address = args.contract or os.getenv("CONTRACT_ADDRESS")
    if not contract_address:
        eprint(
            "Missing contract address. Provide --contract or set CONTRACT_ADDRESS in .env"
        )
        sys.exit(2)

    contract = get_contract(w3, contract_address, abi)

    acct, from_address = get_account_and_from(private_key, args.sender)
    if not from_address:
        eprint("Cannot determine sender. Provide --from or a PRIVATE_KEY")
        sys.exit(2)

    inner_fn = contract.functions.setLockPeriod(int(args.period))
    inner_data: HexBytes = inner_fn._encode_transaction_data()  # type: ignore[attr-defined]

    fn = contract.functions.submitTransaction(contract.address, 0, inner_data)

    res = build_and_send_contract_tx(
        w3,
        fn,
        from_address,
        private_key,
        value_wei=0,
        gas=args.gas,
        chain_id=chain_id,
        nonce=args.nonce,
        max_fee_gwei=(
            Decimal(args.max_fee_gwei) if args.max_fee_gwei is not None else None
        ),
        max_priority_gwei=(
            Decimal(args.max_priority_gwei)
            if args.max_priority_gwei is not None
            else None
        ),
        gas_price_gwei=(
            Decimal(args.gas_price_gwei) if args.gas_price_gwei is not None else None
        ),
        wait=not args.no_wait,
    )
    pretty_print(res, as_json=args.json)


def cmd_views(args: argparse.Namespace) -> None:
    load_env()
    rpc_url = args.rpc or os.getenv("RPC_URL")
    if not rpc_url:
        eprint("Missing RPC URL. Provide --rpc or set RPC_URL in .env")
        sys.exit(2)
    w3 = get_w3(rpc_url)

    abi = load_abi(args.abi_path)

    contract_address = args.contract or os.getenv("CONTRACT_ADDRESS")
    if not contract_address:
        eprint(
            "Missing contract address. Provide --contract or set CONTRACT_ADDRESS in .env"
        )
        sys.exit(2)

    contract = get_contract(w3, contract_address, abi)

    if args.subcmd == "owners":
        pretty_print(contract.functions.getOwners().call(), as_json=args.json)
    elif args.subcmd == "threshold":
        pretty_print(contract.functions.getThreshold().call(), as_json=args.json)
    elif args.subcmd == "txcount":
        pretty_print(contract.functions.transactionCount().call(), as_json=args.json)
    elif args.subcmd == "tx":
        try:
            pretty_print(
                contract.functions.getTransaction(args.id).call(), as_json=args.json
            )
        except BadFunctionCallOutput:
            # Fallback to public mapping getter signature
            tx_tuple = contract.functions.transactions(args.id).call()
            # Normalize to the same shape as getTransaction
            result = {
                "destination": tx_tuple[0],
                "value": tx_tuple[1],
                "data": (
                    Web3.to_hex(tx_tuple[2])
                    if isinstance(tx_tuple[2], (bytes, bytearray))
                    else tx_tuple[2]
                ),
                "executed": tx_tuple[3],
            }
            pretty_print(result, as_json=args.json)
    elif args.subcmd == "is-owner":
        pretty_print(
            contract.functions.isOwner(w3.to_checksum_address(args.addr)).call(),
            as_json=args.json,
        )
    elif args.subcmd == "is-confirmed":
        pretty_print(
            contract.functions.isConfirmed(
                args.id, w3.to_checksum_address(args.owner)
            ).call(),
            as_json=args.json,
        )
    elif args.subcmd == "confcount":
        pretty_print(
            contract.functions.getConfirmationCount(args.id).call(), as_json=args.json
        )
    elif args.subcmd == "owner-ver":
        pretty_print(contract.functions.getOwnerSetVersion().call(), as_json=args.json)
    elif args.subcmd == "lock-period":
        pretty_print(contract.functions.lockPeriod().call(), as_json=args.json)
    elif args.subcmd == "submission-block":
        pretty_print(
            contract.functions.submissionBlock(args.id).call(), as_json=args.json
        )
    else:
        eprint("Unknown views subcommand")
        sys.exit(2)


def cmd_admin_send(args: argparse.Namespace) -> None:
    # Helper for confirm/revoke/execute by tx id
    load_env()
    rpc_url = args.rpc or os.getenv("RPC_URL")
    if not rpc_url:
        eprint("Missing RPC URL. Provide --rpc or set RPC_URL in .env")
        sys.exit(2)
    w3 = get_w3(rpc_url)

    abi = load_abi(args.abi_path)

    private_key = args.pk or os.getenv("PRIVATE_KEY")
    if not private_key:
        eprint("Missing private key. Provide --pk or set PRIVATE_KEY in .env")
        sys.exit(2)

    chain_id = (
        int(args.chain_id)
        if args.chain_id
        else (int(os.getenv("CHAIN_ID")) if os.getenv("CHAIN_ID") else None)
    )

    contract_address = args.contract or os.getenv("CONTRACT_ADDRESS")
    if not contract_address:
        eprint(
            "Missing contract address. Provide --contract or set CONTRACT_ADDRESS in .env"
        )
        sys.exit(2)

    contract = get_contract(w3, contract_address, abi)

    acct, from_address = get_account_and_from(private_key, args.sender)
    if not from_address:
        eprint("Cannot determine sender. Provide --from or a PRIVATE_KEY")
        sys.exit(2)

    if args.subcmd == "confirm":
        fn = contract.functions.confirmTransaction(args.id)
    elif args.subcmd == "revoke":
        fn = contract.functions.revokeConfirmation(args.id)
    elif args.subcmd == "execute":
        fn = contract.functions.executeTransaction(args.id)
    else:
        eprint("Unknown admin action")
        sys.exit(2)

    res = build_and_send_contract_tx(
        w3,
        fn,
        from_address,
        private_key,
        value_wei=0,
        gas=args.gas,
        chain_id=chain_id,
        nonce=args.nonce,
        max_fee_gwei=(
            Decimal(args.max_fee_gwei) if args.max_fee_gwei is not None else None
        ),
        max_priority_gwei=(
            Decimal(args.max_priority_gwei)
            if args.max_priority_gwei is not None
            else None
        ),
        gas_price_gwei=(
            Decimal(args.gas_price_gwei) if args.gas_price_gwei is not None else None
        ),
        wait=not args.no_wait,
    )
    pretty_print(res, as_json=args.json)


def cmd_encode(args: argparse.Namespace) -> None:
    load_env()
    rpc_url = args.rpc or os.getenv("RPC_URL")
    if not rpc_url:
        eprint("Missing RPC URL. Provide --rpc or set RPC_URL in .env")
        sys.exit(2)
    w3 = get_w3(rpc_url)

    contract_address = args.contract or os.getenv("CONTRACT_ADDRESS")
    if not contract_address:
        eprint(
            "Missing contract address. Provide --contract or set CONTRACT_ADDRESS in .env"
        )
        sys.exit(2)

    contract = get_contract(w3, contract_address, TARGET_ABI)
    parsed_args, _ = parse_args_for_function(
        w3, TARGET_ABI, args.function, args.fn_args
    )
    fn = getattr(contract.functions, args.function)(*parsed_args)
    data = fn._encode_transaction_data()
    if isinstance(data, (bytes, bytearray)):
        print(Web3.to_hex(data))
    else:
        print(data)


def build_parser() -> argparse.ArgumentParser:
    p = argparse.ArgumentParser(
        description=(
            "CLI for MultiSigWallet. Configure via .env (PRIVATE_KEY, RPC_URL, CONTRACT_ADDRESS, CHAIN_ID).\n"
            "Commands: owners, threshold, tx, txcount, is-owner, is-confirmed, confcount, lock-period, submission-block, confirm, revoke, execute, add-owner, remove-owner, set-lock-period, submit, encode"
        )
    )

    # Common/global args
    p.add_argument("--rpc", dest="rpc", help="RPC URL (overrides RPC_URL)")
    p.add_argument(
        "--contract",
        dest="contract",
        help="Contract address (overrides CONTRACT_ADDRESS)",
    )
    p.add_argument(
        "--abi", dest="abi_path", help="Path to ABI JSON file (overrides embedded ABI)"
    )
    p.add_argument("--json", action="store_true", help="JSON output")
    p.add_argument("--verbose", action="store_true", help="Verbose logging")

    sub = p.add_subparsers(dest="command", required=True)

    # Convenience reads
    sp_views = sub.add_parser("owners", help="Get owners (alias of view)")
    sp_views.set_defaults(func=cmd_views, subcmd="owners")

    sp_thr = sub.add_parser("threshold", help="Get threshold")
    sp_thr.set_defaults(func=cmd_views, subcmd="threshold")

    sp_txc = sub.add_parser("txcount", help="Get transactionCount")
    sp_txc.set_defaults(func=cmd_views, subcmd="txcount")

    sp_tx = sub.add_parser("tx", help="Get transaction by id")
    sp_tx.add_argument("id", type=int)
    sp_tx.set_defaults(func=cmd_views, subcmd="tx")

    sp_is_owner = sub.add_parser("is-owner", help="Check if address is owner")
    sp_is_owner.add_argument("addr")
    sp_is_owner.set_defaults(func=cmd_views, subcmd="is-owner")

    sp_is_conf = sub.add_parser(
        "is-confirmed", help="Check if tx is confirmed by owner"
    )
    sp_is_conf.add_argument("id", type=int)
    sp_is_conf.add_argument("owner")
    sp_is_conf.set_defaults(func=cmd_views, subcmd="is-confirmed")

    sp_confcount = sub.add_parser("confcount", help="Get confirmation count for tx")
    sp_confcount.add_argument("id", type=int)
    sp_confcount.set_defaults(func=cmd_views, subcmd="confcount")

    sp_owner_ver = sub.add_parser("owner-ver", help="Get owner set version")
    sp_owner_ver.set_defaults(func=cmd_views, subcmd="owner-ver")

    sp_lock_period = sub.add_parser("lock-period", help="Get lockPeriod")
    sp_lock_period.set_defaults(func=cmd_views, subcmd="lock-period")

    sp_submission_block = sub.add_parser(
        "submission-block", help="Get submissionBlock for a transaction id"
    )
    sp_submission_block.add_argument("id", type=int)
    sp_submission_block.set_defaults(func=cmd_views, subcmd="submission-block")

    # Admin helpers
    sp_confirm = sub.add_parser("confirm", help="Confirm a transaction by id")
    sp_confirm.add_argument("id", type=int)
    sp_confirm.add_argument(
        "--pk", dest="pk", help="Private key (overrides PRIVATE_KEY)"
    )
    sp_confirm.add_argument("--from", dest="sender", help="Sender address override")
    sp_confirm.add_argument(
        "--chain-id", dest="chain_id", type=int, help="Chain ID override"
    )
    sp_confirm.add_argument("--gas", dest="gas", type=int, help="Explicit gas limit")
    sp_confirm.add_argument("--nonce", dest="nonce", type=int, help="Explicit nonce")
    sp_confirm.add_argument(
        "--gas-price-gwei",
        dest="gas_price_gwei",
        type=Decimal,
        help="Legacy gasPrice in gwei",
    )
    sp_confirm.add_argument(
        "--max-fee-gwei",
        dest="max_fee_gwei",
        type=Decimal,
        help="EIP-1559 maxFeePerGas in gwei",
    )
    sp_confirm.add_argument(
        "--max-priority-gwei",
        dest="max_priority_gwei",
        type=Decimal,
        help="EIP-1559 maxPriorityFeePerGas in gwei",
    )
    sp_confirm.add_argument(
        "--no-wait", dest="no_wait", action="store_true", help="Do not wait for receipt"
    )
    sp_confirm.set_defaults(func=cmd_admin_send, subcmd="confirm")

    sp_revoke = sub.add_parser("revoke", help="Revoke a confirmation by id")
    sp_revoke.add_argument("id", type=int)
    sp_revoke.add_argument(
        "--pk", dest="pk", help="Private key (overrides PRIVATE_KEY)"
    )
    sp_revoke.add_argument("--from", dest="sender", help="Sender address override")
    sp_revoke.add_argument(
        "--chain-id", dest="chain_id", type=int, help="Chain ID override"
    )
    sp_revoke.add_argument("--gas", dest="gas", type=int, help="Explicit gas limit")
    sp_revoke.add_argument("--nonce", dest="nonce", type=int, help="Explicit nonce")
    sp_revoke.add_argument(
        "--gas-price-gwei",
        dest="gas_price_gwei",
        type=Decimal,
        help="Legacy gasPrice in gwei",
    )
    sp_revoke.add_argument(
        "--max-fee-gwei",
        dest="max_fee_gwei",
        type=Decimal,
        help="EIP-1559 maxFeePerGas in gwei",
    )
    sp_revoke.add_argument(
        "--max-priority-gwei",
        dest="max_priority_gwei",
        type=Decimal,
        help="EIP-1559 maxPriorityFeePerGas in gwei",
    )
    sp_revoke.add_argument(
        "--no-wait", dest="no_wait", action="store_true", help="Do not wait for receipt"
    )
    sp_revoke.set_defaults(func=cmd_admin_send, subcmd="revoke")

    sp_execute = sub.add_parser("execute", help="Execute a transaction by id")
    sp_execute.add_argument("id", type=int)
    sp_execute.add_argument(
        "--pk", dest="pk", help="Private key (overrides PRIVATE_KEY)"
    )
    sp_execute.add_argument("--from", dest="sender", help="Sender address override")
    sp_execute.add_argument(
        "--chain-id", dest="chain_id", type=int, help="Chain ID override"
    )
    sp_execute.add_argument("--gas", dest="gas", type=int, help="Explicit gas limit")
    sp_execute.add_argument("--nonce", dest="nonce", type=int, help="Explicit nonce")
    sp_execute.add_argument(
        "--gas-price-gwei",
        dest="gas_price_gwei",
        type=Decimal,
        help="Legacy gasPrice in gwei",
    )
    sp_execute.add_argument(
        "--max-fee-gwei",
        dest="max_fee_gwei",
        type=Decimal,
        help="EIP-1559 maxFeePerGas in gwei",
    )
    sp_execute.add_argument(
        "--max-priority-gwei",
        dest="max_priority_gwei",
        type=Decimal,
        help="EIP-1559 maxPriorityFeePerGas in gwei",
    )
    sp_execute.add_argument(
        "--no-wait", dest="no_wait", action="store_true", help="Do not wait for receipt"
    )
    sp_execute.set_defaults(func=cmd_admin_send, subcmd="execute")

    # add-owner
    sp_add_owner = sub.add_parser(
        "add-owner", help="Propose adding an owner (encode+submit to self)"
    )
    sp_add_owner.add_argument("owner", help="Owner address to add")
    sp_add_owner.add_argument(
        "--pk", dest="pk", help="Private key (overrides PRIVATE_KEY)"
    )
    sp_add_owner.add_argument("--from", dest="sender", help="Sender address override")
    sp_add_owner.add_argument(
        "--chain-id", dest="chain_id", type=int, help="Chain ID override"
    )
    sp_add_owner.add_argument("--gas", dest="gas", type=int, help="Explicit gas limit")
    sp_add_owner.add_argument("--nonce", dest="nonce", type=int, help="Explicit nonce")
    sp_add_owner.add_argument(
        "--gas-price-gwei",
        dest="gas_price_gwei",
        type=Decimal,
        help="Legacy gasPrice in gwei",
    )
    sp_add_owner.add_argument(
        "--max-fee-gwei",
        dest="max_fee_gwei",
        type=Decimal,
        help="EIP-1559 maxFeePerGas in gwei",
    )
    sp_add_owner.add_argument(
        "--max-priority-gwei",
        dest="max_priority_gwei",
        type=Decimal,
        help="EIP-1559 maxPriorityFeePerGas in gwei",
    )
    sp_add_owner.add_argument(
        "--no-wait", dest="no_wait", action="store_true", help="Do not wait for receipt"
    )
    sp_add_owner.set_defaults(func=cmd_add_owner)

    # remove-owner
    sp_remove_owner = sub.add_parser(
        "remove-owner", help="Propose removing an owner (encode+submit to self)"
    )
    sp_remove_owner.add_argument("owner", help="Owner address to remove")
    sp_remove_owner.add_argument(
        "--pk", dest="pk", help="Private key (overrides PRIVATE_KEY)"
    )
    sp_remove_owner.add_argument(
        "--from", dest="sender", help="Sender address override"
    )
    sp_remove_owner.add_argument(
        "--chain-id", dest="chain_id", type=int, help="Chain ID override"
    )
    sp_remove_owner.add_argument(
        "--gas", dest="gas", type=int, help="Explicit gas limit"
    )
    sp_remove_owner.add_argument(
        "--nonce", dest="nonce", type=int, help="Explicit nonce"
    )
    sp_remove_owner.add_argument(
        "--gas-price-gwei",
        dest="gas_price_gwei",
        type=Decimal,
        help="Legacy gasPrice in gwei",
    )
    sp_remove_owner.add_argument(
        "--max-fee-gwei",
        dest="max_fee_gwei",
        type=Decimal,
        help="EIP-1559 maxFeePerGas in gwei",
    )
    sp_remove_owner.add_argument(
        "--max-priority-gwei",
        dest="max_priority_gwei",
        type=Decimal,
        help="EIP-1559 maxPriorityFeePerGas in gwei",
    )
    sp_remove_owner.add_argument(
        "--no-wait", dest="no_wait", action="store_true", help="Do not wait for receipt"
    )
    sp_remove_owner.set_defaults(func=cmd_remove_owner)

    # set-lock-period
    sp_set_lock = sub.add_parser(
        "set-lock-period",
        aliases=["setlockperiod"],
        help="Propose setting lock period (encode+submit to self)",
    )
    sp_set_lock.add_argument("period", type=int, help="New lock period")
    sp_set_lock.add_argument(
        "--pk", dest="pk", help="Private key (overrides PRIVATE_KEY)"
    )
    sp_set_lock.add_argument("--from", dest="sender", help="Sender address override")
    sp_set_lock.add_argument(
        "--chain-id", dest="chain_id", type=int, help="Chain ID override"
    )
    sp_set_lock.add_argument("--gas", dest="gas", type=int, help="Explicit gas limit")
    sp_set_lock.add_argument("--nonce", dest="nonce", type=int, help="Explicit nonce")
    sp_set_lock.add_argument(
        "--gas-price-gwei",
        dest="gas_price_gwei",
        type=Decimal,
        help="Legacy gasPrice in gwei",
    )
    sp_set_lock.add_argument(
        "--max-fee-gwei",
        dest="max_fee_gwei",
        type=Decimal,
        help="EIP-1559 maxFeePerGas in gwei",
    )
    sp_set_lock.add_argument(
        "--max-priority-gwei",
        dest="max_priority_gwei",
        type=Decimal,
        help="EIP-1559 maxPriorityFeePerGas in gwei",
    )
    sp_set_lock.add_argument(
        "--no-wait", dest="no_wait", action="store_true", help="Do not wait for receipt"
    )
    sp_set_lock.set_defaults(func=cmd_set_lock_period)

    # submit arbitrary tx
    sp_submit = sub.add_parser(
        "submit", help="Submit an arbitrary transaction through the multisig"
    )
    sp_submit.add_argument("--to", required=True, help="Destination address")
    sp_submit.add_argument(
        "--data", required=False, default="", help="Calldata hex (0x...)"
    )
    sp_submit.add_argument(
        "--pk", dest="pk", help="Private key (overrides PRIVATE_KEY)"
    )
    sp_submit.add_argument("--from", dest="sender", help="Sender address override")
    sp_submit.add_argument(
        "--chain-id", dest="chain_id", type=int, help="Chain ID override"
    )
    sp_submit.add_argument("--gas", dest="gas", type=int, help="Explicit gas limit")
    sp_submit.add_argument("--nonce", dest="nonce", type=int, help="Explicit nonce")
    sp_submit.add_argument(
        "--value-wei",
        dest="value_wei",
        type=int,
        help="ETH value in wei for the target call",
    )
    sp_submit.add_argument(
        "--value-eth", dest="value_eth", help="ETH value in ETH for the target call"
    )
    sp_submit.add_argument(
        "--gas-price-gwei",
        dest="gas_price_gwei",
        type=Decimal,
        help="Legacy gasPrice in gwei",
    )
    sp_submit.add_argument(
        "--max-fee-gwei",
        dest="max_fee_gwei",
        type=Decimal,
        help="EIP-1559 maxFeePerGas in gwei",
    )
    sp_submit.add_argument(
        "--max-priority-gwei",
        dest="max_priority_gwei",
        type=Decimal,
        help="EIP-1559 maxPriorityFeePerGas in gwei",
    )
    sp_submit.add_argument(
        "--no-wait", dest="no_wait", action="store_true", help="Do not wait for receipt"
    )
    sp_submit.set_defaults(func=cmd_submit)

    # Encode data for a function
    sp_encode = sub.add_parser("encode", help="Encode calldata for a contract function")
    sp_encode.add_argument("function", help="Function name on the target contract")
    sp_encode.add_argument(
        "fn_args",
        nargs=argparse.REMAINDER,
        help="Function args for the target contract function",
    )
    sp_encode.set_defaults(func=cmd_encode)

    return p


def main() -> None:
    parser = build_parser()
    args = parser.parse_args()
    try:
        args.func(args)
    except KeyboardInterrupt:
        eprint("Interrupted")
        sys.exit(130)
    except ValueError as e:
        eprint(f"Error: {e}")
        sys.exit(2)


if __name__ == "__main__":
    main()
